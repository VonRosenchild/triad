{"name":"Triad","tagline":"Triad - Lightweight MVP / HMVP Framework","body":"# Triad PHP Framework\r\n\r\nTriad PHP Framework is PHP 5.3 framework handling (HTTP or other) requests to your application that\r\nresults in response - json, php serialized, raw, template engine - smarty or custom.\r\n\r\nThis framework was done with simplicity in mind - basically it handles requests and handling exceptions. \r\nCustom classes (database or template engine) can be easily implemented in application \r\nand this framework is not trying to implement custom database or template engine class - \r\ninstead, use the one you like the most! \r\n\r\nRouter can handle simple requests or MVP application at full - and you can easily create inline requests \r\nin your application (this Framework is HMVP - check\r\n[HMVC](http://en.wikipedia.org/wiki/Hierarchical_model%E2%80%93view%E2%80%93controller) as reference) - even\r\nto remote server. \r\n\r\n# Prerequisites\r\n- PHP 5.3 or better (for namespace support)\r\n\r\n# Requests and responses\r\n\r\n<img src=\"https://raw.github.com/triadphp/triad/master/docs/triad-scheme.png\" />\r\n\r\n### Request \r\nRequest `\\Triad\\Request` consists of \r\n- `method` - `create`, `read`, `update`, `delete`\r\n- `path` (string with full path /site-path)\r\n- `params` (dictionary array with params)\r\n\r\nRequest can be defined \r\n```php\r\n$request = new \\Triad\\Request(\"/users/get\");\r\n$request->setParams(array(\"params\" => 1));\r\n$request->setMethod(\\Triad\\RequestMethod::READ);\r\n```\r\n```php\r\n$request = \\Triad\\Request::factory(\"/users/get\", array(\"params\" => 1));\r\n```\r\n\r\nor created from http request \r\n```php\r\n$request = \\Triad\\Requests\\HttpRequest::fromServerRequest();\r\n```\r\n\r\n### Response \r\nResponse is dictionary with values that contain own serializing method `outputBody` and return method `get`. \r\nBuild in responses are \r\n- `\\Triad\\Responses\\JsonResponse`\r\n- `\\Triad\\Responses\\PhpSerializeResponse`\r\n- `\\Triad\\Responses\\RawResponse`\r\n- `\\Triad\\Responses\\RedirectResponse`\r\n\r\nTo obtain final response after application execution\r\n```php\r\n$response = $request->execute($application)->response;\r\n```\r\n\r\nResponse can be outputed with output buffer (php print) or returned\r\n```php\r\n$response->send(); // output\r\nvar_dump($response->get()); // return\r\n```\r\n\r\n### Summary\r\nInternal calls in same application are called as easy as \r\n```php\r\n$created = \\Triad\\Request::factory(\"/users/create\", array(\"email\" => \"john@doe.com\"))\r\n           ->execute($this->application)\r\n           ->response\r\n           ->get();\r\n```\r\n\r\nCalls to remote application running on remote http server are done using `\\Triad\\RemoteApplication` as  \r\n```php\r\n$remoteServer = \\Triad\\RemoteApplication::factory(array(\r\n   \"url\" => \"http://server02\",\r\n   \"base_path\" => \"/\", \r\n   \"client_secret\" => \"\" // if remote application client_secret set in config\r\n));\r\n\r\n$userData = \\Triad\\Request::factory(\"/users/get\", array(\"id\" => 1))\r\n            ->execute($remoteServer)\r\n            ->response\r\n            ->get();\r\n```\r\n\r\n# Application\r\nTo create a new application, implement own Application class that extends `\\Triad\\Application` \r\n\r\n`index.php`\r\n```php\r\n<?php\r\nrequire(\"Triad/Load.php\");\r\n\r\nclass Application extends \\Triad\\Application\r\n{\r\n    public function init() {\r\n        // set up routes\r\n        $router = new \\Triad\\Router();\r\n        \r\n        // simple route that matches /increment-[number] \r\n        $router->add(\"#^/increment-(?P<number_to_increment>\\d+)#\", \r\n            array($this, \"myCustomHandler\"), \r\n            true // regex matching enabled\r\n        ); \r\n        \r\n        $this->setRouter($router);\r\n    }\r\n\r\n    public function myCustomHandler(Application $application, \r\n        \\Triad\\Request $request, \r\n        $params = array()) {\r\n        $request->response[\"number\"] = $params[\"number_to_increment\"] + 1;\r\n    }\r\n\r\n    public function handleException(\\Exception $e, \\Triad\\Request $request) {\r\n    \tvar_dump($e); \r\n    }\r\n}\r\n\r\n$config = \\Triad\\Config::factory(__DIR__ . \"/config.php\");\r\n$application = new Application($config);\r\n\r\n// default response type\r\n$response = new \\Triad\\Responses\\JsonResponse(); \r\n\r\n$request = \\Triad\\Requests\\HttpRequest::fromServerRequest($response);\r\n$request->execute($application)->response->send();\r\n```\r\n\r\n`config.php` containing your app settings \r\n```php\r\n<?php\r\nreturn array(\r\n    \"base_path\" => \"/\", \r\n    \"environment\" => \"development\", \r\n    \"client_secret\" => null\r\n);\r\n```\r\n\r\n`.htaccess` mod rewrite settings\r\n```\r\n<IfModule mod_rewrite.c>\r\n    RewriteEngine On\r\n    # RewriteBase /\r\n\r\n    # front controller\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteCond %{REQUEST_FILENAME} !-d\r\n    RewriteRule .* index.php [L]\r\n</IfModule>\r\n```\r\n\r\n### Full examples\r\nCheck examples of full applications that follow MVP, PHP namespaces and dependency injection design patterns. \r\n[Examples](https://github.com/triadphp/examples)\r\n\r\n## Author\r\n- [Marek Vavrecan](mailto:vavrecan@gmail.com)\r\n- [Donate by PayPal](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=DX479UBWGSMUG&lc=US&item_name=PHP%20Triad&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted)\r\n\r\n## License\r\n- [GNU General Public License, version 3](http://www.gnu.org/licenses/gpl-3.0.html)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}